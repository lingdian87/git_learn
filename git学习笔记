                                        Git 学习笔记整理

一.Git的安装

   1.可以先输入 git,看系统有无安装git.如果没有安装,则输入  sudo apt-get install git 进行安装.

   2.安装完成后,还需要最后一步设置,在命令行输入:
       git config --global user .name "your name"
       
       git config --global user .name "emaill@exapmle.com"

       [注意]>>>这个地方必须要设置,后面才能使用.

二.创建版本库并添加文件到版本库

   1.首先,选择一个合适的地方,创建一个空目录test(类似文件夹)

       [注意]>>> 首先必须把将要进行版本控制的文件放到test目录(或者子目录)下.
        
   2.然后,进入刚才创建的空目录 cd test (此时可以通过 pwd 命令查看当前目录).

   3.最后,通过 git init 命令把test目录变成Git可以管理的仓库.

   4.把需要放进库里的文件先放到新建的库(test目录)里,然后 git add filename.
   
     (必须是刚才已经放在test目录下的文件)>>>>告诉Git,把一个文件添加到了git仓库

   5. git commit -m "对本次更新的说明,方便后面的管理"

    [特别注意]>>>需要进行Git命令操作的时候，必须在Git仓库目录(或者子目录)下才有效。 

三.修改并提交文件

   1.修改完文件以后,可以先用 git diff filename 命令查看修改后的文件,与原文件相比,有哪些改动的地方,确定无误后再提交.
   
   2.使用 git add filename 提交刚才修改过的文件.

   3.提交修改的文件后,再用 git status 命令查看版本库当前的状态.
   
   4.最后,再用 git commit -m "版本说明" 提交修改的文件到版本库.

[总结]>>> 1.基本概念  
                工作区:就是你在电脑里能看到的目录(即是git init 所建的那个目录)

                版本库:工作区里一个隐藏的目录(.git),版本库主要分为两个重要的部分,分别是暂存区(stage)和分支.

2.git add 命令实际上就是把工作区(包含所有需要修改的文件)的修改放到暂存区(Stage/index),然后再执行git commit 一次性把暂存区的所有修改提交到分支.


四.版本回退

   1.首先可以用 git reflog 命令查看对文件的修改历史.
   
   [补充]>>    1.历史信息包括:commit id,HEAD{n}(指针号),文件版本说明.
                
               2.git log 可以显示出历史记录的详细信息，包括修改作者，版本号，修改日期等。
               
                 如果嫌显示的信息太多,还可以使用 git log --pretty=oneline 命令只显示版本号和修改说明(觉得这个时候用git reflog更好).

   2.然后可以用 git reset --hard [这里可以有三种方式进行版本回退]分别如下:

          [1]>> HEAD^^      ^的个数表示从当前开始往前数的版本数(个数较多时,可用 HEAD~N 来替代).

          [2]>> HEAD@{n}    直接找到需要回退到的版本所对应的指针号.

          [3]>> commit id   版本所对应的commit id 号. 


[总结]--->1.git log 可以查看提交历史,以便确定要回退到哪个版本.

          2.git reflog  查看命令历史(主要是查看当前库里各版本的commit id号,以便确定回到未来的哪个版本)
  
          3.gitk--->图形化工具查阅读提交历史,基本相当于git log命令的可视化版本.
            在项目工作目录中输入gitk命令后,就会启动图形界面:
                上半个窗口显示的是历次提交的分支祖先图谱,下半个窗口显示当前点选的提交对应的具体差异.

[思考]>>>  如何用git管理多个文件(例如需要管理两部不同的小说A和B)的问题?

        <注意> 1. 一个版本库最好只管理一个文件(如小说A),因为如果同时管理多个文件会出现版本混乱的问题.
   
               2. 如果要管理多个文件,应该分别给每个文件都单独建立一个版本库(对应的库目录).

               3. 新建版本库的方法参见<二>.

五.管理修改

   1.git checkout -- file(注意 -- 前后有空格)命令,当你改乱了工作区(没有git add 添加到暂存区)的某个文件时,
   
     可以用这个命令直接丢弃刚刚做的修改. 

   2.如果在工作区改乱了某个文件的内容,并且还git add 添加到了暂存区,想要丢弃修改需要分两步:

          第一步:git reset HEAD file 回到1(也就是把提交到暂存区的修改,退回到工作区),
          
          然后再按照1执行 git chechout -- file 彻底丢弃修改.

   3.如果已经提交(即不仅是git add 添加到了暂存区,而且还git commit 提交到了版本库),
   
     不合适的修改到了版本库,想要撤销本次提交,则可按照 git reset --hard [版本id]进行版本回退.
     
     ------->前提是,本次修改没有提交到远程库.

   4.git rm 删除文件:一般情况下,在文件管理器中把文件删除(或者用rm命令删除)之后,工作区和版本库就不一致了(用git status可以查看哪些地方不一致).

     此时,如果确定要删除文件,再用 git rm file 命令删掉,并且git commit 提交到版本库.
     
     如果是删错了,则可以用git checkout -- file 命令撤销删除操作
     
     (实质上,git checkout 使用版本库里的版本替换工作区的版本)

六.[尤其重要]----->远程仓库

    1.初识 GitHub :
        
        a.创建SSH Key(GitHub注册略过):首先在用户主目录下查看有无.ssh目录,如果有,        
        再看看目录下有无 id_rsa(私钥) 和id_rsa.pub(公钥) 这两个文件,如果已经有了,
        可直接跳到下一步;如果没有,则在终端输入命令: ssh-keygen -t rsa -C "youremail@example.com"
        然后一路回车,使用默认值即可(可以无需设置密码,因为毕竟没那个必要)

        b.登陆GitHub,add ssh key,并在key文本框里粘帖id_rsa_pub文件的内容,完成这些内容以后
        就可以开始远程仓库的学习了.
        [小结]--->之所以要创建SSH,是因为GitHub需要识别出你推送的提交确实是本人推送的,如果你有若干
              电脑,一会儿在公司提交,一会儿在家里提交,只需要把每台电脑的Key都添加到GitHub上就可以了.

    2.关联远程仓库-->就是将本地库和远程库关联起来,实现同步的功能.

        a.首先登陆GitHub,然后在右上角找到"Create a new repo"按钮,创建一个新的仓库(如果GitHub上没有可用仓库的时候,就需要新建一个空仓库)
          
        b.在本地仓库git_learn(想要把哪个本地仓库和远程库关联,就在该仓库目录下)运行命令:git remote add [shortname] [url]-->与哪个远程库关联
         ----> 将一个名为shortname的远程库与本地库(即当前工作目录)关联起来
         接下来,就可以把本地仓库的所有内容推送到远程库上了
       
    [提示]--->[shortname]其实就是[url]的一个别名.
       
       c.git push -u [shortname] master 这样就把本地库的内容推送到了远程上(实际上是把当前分支master推
          送到远程仓库origin上)
          [说明]--->1.由于远程库是空的,所以第一次推送master分支时,加上了-u参数,这样Git不但
                    把本地master分支内容推送到远程新的master分支,还会把本地的master分支
                    和远程的master分支关联起来,以后的推送或拉取时就可以简化命令.
                    从现在起,只要本地做了提交(git commit),就可以通过 git push origin master把本地
                    master分支的最新修改推送到GitHub.
                    2.第一次使用Git的clone或者push命令连接GitHub时会得到一个警告,警告是为了验证服务器的Key
                      输入yes就可以了---->这个警告只会出现一次.

      [小结]--->1.要关联远程库,用命令 git remote add [shortname] [url]

                2.关联完毕以后,可以使用命令git push -u [shortname] master(本地需要推送的分支,也可以是别的分支例如:dev) 将本地库推送到远程库,
                因为是第一次推送,所以用了-u(表示不仅推送本地到远程库,还将本地master与远程库管理起来)
                以后再次本地提交,使用命令 git push origin master 就可以了.

    3.远程仓库的重命名和删除--->在GitHub上选中相应的仓库,然后在右下角有一个Settings的按钮,单击后会出来一个页面
      然后就可以进行重命名和删除的工作了(删除的时候,那个空框里要填上被删除仓库的名字).
   
    4.从远程库克隆

        a.首先登陆GitHub创建一个名为gitskills的远程库,然后在终端用命令 git clone git@...(地址名),即可以把
          远程库里的文件克隆到本地(当前目录下),接下来就可以进入本地gitskills里去查看克隆过来的文件了.

    [总结]--->要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
              Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

[特别补充]-->1. git remote 查看当前配置有哪些远程仓库:进入到工作目录以后,输入git remote,会列出
每个远程库的简短名字
                [有用的]---->git remote -v(verbose的简写)会显示对应的克隆地址,以便于轻松地从这些用户的仓库中拉取他们的提交到本地.

             2.


七.分支管理-----> 分支其实就是指向某个提交的指针.

    1.创建与合并分支:
     
       a.查看分支---> git branch:列出本地已经存在的分支,并且在当前分支前面加"*"
             git branch -r :列出远程分支
             git branch -a :列出本地分支和远程分支,远程分支会用红色表示出来(如果开了颜色支持的话),其中HEAD指向的是远程库当前工作的分支.

    [提示]---> 当你不知道本地或者远程有哪些分支的情况下(而且还需要用到这些分支),就可以用这个命令来进行查看,特别有用.
        
       b.创建本地分支---> git branch [name] <start-point>:只是创建分支,并不进行分支的切换.

        [提示]---> 1.<start-point>是创建分支时指向的节点,如果没有指定的话,则默认起始位置是指向当前节点
                    (也就是创建分支时所在的那个commit),后面工作时各分支分别从当前节点开始提交,并不影响其它分支的内容.

                   2.master分支只有在最后版本发布时,才把各分支进行合并.

                   3.如果有多个分支需要合并,只能两两相互合并----> 一步一步来.
       
       c.重命名本地分支---> git branch -m oldbranh newbranch(如果newbranch分支已经存在,则需要使用-M强制强制重命名).
          
       d.删除本地分支--->git branch -d [name]  (如果是删除远程分支,则需要在-d后面再加上-r就可以了). 
       
          删除远程分支-->git push ; [远程分支名]

       e.切换本地分支--->git checkout [name]:由当前分支切换到[name]分支 

       f.创建+切换本地分支--->git chechout -b [name]:创建新的分支[name],并切换到新分支.

       g.合并分支到当前分支--->git merge [name];将分支[name]合并到当前分支.

    [补充说明]--->合并分支还可以用 git rebase [name] 命令,下面重点说一下git merge和git rebase (二者的区别见网上相关资料):

            1.把master分支合并到别的分支时用rebase,把别的分支(功能分支)合并到master分支(主分支)上用merge.
            2.不要对提交过的分支进行rebase,能用merge就尽量不用rebase.
            3.merge合并后commit历史是一个环状图,看起来比较繁琐,但是有详细的提交历史,便于查看改错;rebase合并后commit历史是一个线状图,
              看起来更简洁,但是有风险(因为合并的同时丢掉了提交历史,不便于查错).
            4.总的来说,rebase更温柔一点,会一步一步提交,遇到冲突会提示解决,然后继续;而merge更粗暴一点,不论什么,直接合并.
    2.解决冲突:如果master分支和[name]分支各自都分别有新的提交,此时用 git merge 合并分支就会产生冲突.
    
    --->a. git merge [name]会提示有冲突,此时必须首先解决冲突
    
        b. 在当前分支下打开冲突文件(git会在会在文件里标记处不同分支的内容),修改好后保存,再提交.
        
        c.可以用 git log --graph --pretty=oneline --abbrev-commit 查看分支的合并情况,或者也可以用gitk图形化界面来查看更清晰.
        
        d.在b中解决完冲突并提交后,再来删除[name]分支,就可以完成合并工作了.
       
    [小结]---> 当git无法自动合并分支时,就必须首先解决冲突.冲突解决后,再提交就ok了.

    3.分支管理策略:用 --no-ff 方式进行 git merge 分支合并以强制禁用Fast forward模式(为了不丢掉分支信息)

        a.---> git merge --no-ff -m "commit 说明" [name]

              --->把[name]分支合并到当前分支,并且强制禁用Fast forward模式,
              其中-m "commit 说明" 相当于合并完成后再提交的意思.
      
        b.分支管理的基本原则:

            首先,master分支应该是非常稳定的,也就是仅用来发布新版本,平时不在上面干活;
            然后,干活都在dev分支上进行,每个小伙伴都在dev分支上再建立自己的分支,等到版本发布时再将dev分支合并到master分支上发布新版本.

    4.Bug分支:当手头工作没有完成(git add 或者git commit),又需要去修复bug(或者临时要做其他的工作)时,可以用git stash 把手头工作暂存.

        a.暂存手头工作---> git stash

        b.回到工作区并删除stash暂存文件---> git stash pop  或者可以用   git stash apply   git stash drop 两条命令完成.

        c.查看当前目录中有多少个暂存文件---> git stash list

        d.恢复到某一个指定的暂存区---> git stash apply stash@{n}

    5.多人协作--->多人协作的工作模式通常是这样：

        首先，可以试图用git push origin branch-name推送自己的修改；

        如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

         如果合并有冲突，则解决冲突，并在本地提交；

         没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

         如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
         用命令git branch --set-upstream branch-name origin/branch-name。

         这就是多人协作的工作模式，一旦熟悉了，就非常简单。
         
         [小结]

               查看远程库信息，使用git remote -v；

               本地新建的分支如果不推送到远程，对其他人就是不可见的；

               从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

               在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
               
               建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

               从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

         [重要]---> git fetch 与 git pull 的区别:

              git fetch origin master:tem   先抓取远程库最新的内容到本地库
              git diff tem                  然后在比较两者间的差别(有冲突的话需要手动修改)
              git merge tem                 最后再合并


              git pull 相当于把 git fetch 和 git merge 一起完成了

        综上,git fetch更安全一些,在merge前可以查看不同的情况,再决定是否合并;git pull 更快速一点,但存在风险.


七.标签管理--->标签其实就是指向某个commit的指针,与分支不同,标签不能移动,一旦建立就固定的指向某个commit.

    1.创建标签: 命令参数和格式与buanch remote 很像.

        git tag [name]    创建一个标签
          
            --->可以用 git tag [name] -m "指定标签信息"

        git tag      查看当前库下所有标签

        git tag [name] [commit_id]   给历史上的某个commit(由commit_id指定)创建标签

        git show [tag_name]  显示某个标签的详细信息

        git chechout [tag_name]   切换到某个tag
        
    2.操作标签:

        git tag -d <tagname>  可以删除一个本地标签

           --->如果要删除一个远程标签分两步:首先,删除本地标签    git tag -d <tagname>  
        
               然后,再删除远程标签  git push origin :refs/tags/<tagname>

        git push origin <tagname>可以推送一个本地标签；

        git push origin --tags可以推送全部未推送过的本地标签；

        

