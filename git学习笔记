                                        Git 学习笔记整理

一.Git的安装

   1.可以先输入 git,看系统有无安装git.如果没有安装,则输入  sudo apt-get install git 进行安装.

   2.安装完成后,还需要最后一步设置,在命令行输入:
       git config --global user .name "your name"
       
       git config --global user .name "emaill@exapmle.com"

       [注意]>>>这个地方必须要设置,后面才能使用.

二.创建版本库并添加文件到版本库

   1.首先,选择一个合适的地方,创建一个空目录test(类似文件夹)

       [注意]>>> 首先必须把将要进行版本控制的文件放到test目录(或者子目录)下.
        
   2.然后,进入刚才创建的空目录 cd test (此时可以通过 pwd 命令查看当前目录).

   3.最后,通过 git init 命令把test目录变成Git可以管理的仓库.

   4.把需要放进库里的文件先放到新建的库(test目录)里,然后 git add filename.
   
     (必须是刚才已经放在test目录下的文件)>>>>告诉Git,把一个文件添加到了git仓库

   5. git commit -m "对本次更新的说明,方便后面的管理"

    [特别注意]>>>需要进行Git命令操作的时候，必须在Git仓库目录(或者子目录)下才有效。 

三.修改并提交文件

   1.修改完文件以后,可以先用 git diff filename 命令查看修改后的文件,与原文件相比,有哪些改动的地方,确定无误后再提交.
   
   2.使用 git add filename 提交刚才修改过的文件.

   3.提交修改的文件后,再用 git status 命令查看版本库当前的状态.
   
   4.最后,再用 git commit -m "版本说明" 提交修改的文件到版本库.

[总结]>>> 1.基本概念  
                工作区:就是你在电脑里能看到的目录(即是git init 所建的那个目录)

                版本库:工作区里一个隐藏的目录(.git),版本库主要分为两个重要的部分,分别是暂存区(stage)和分支.

2.git add 命令实际上就是把工作区(包含所有需要修改的文件)的修改放到暂存区(Stage/index),然后再执行git commit 一次性把暂存区的所有修改提交到分支.


四.版本回退

   1.首先可以用 git reflog 命令查看对文件的修改历史.
   
   [补充]>>    1.历史信息包括:commit id,HEAD{n}(指针号),文件版本说明.
                
               2.git log 可以显示出历史记录的详细信息，包括修改作者，版本号，修改日期等。
               
                 如果嫌显示的信息太多,还可以使用 git log --pretty=oneline 命令只显示版本号和修改说明(觉得这个时候用git reflog更好).

   2.然后可以用 git reset --hard [这里可以有三种方式进行版本回退]分别如下:

          [1]>> HEAD^^      ^的个数表示从当前开始往前数的版本数(个数较多时,可用 HEAD~N 来替代).

          [2]>> HEAD@{n}    直接找到需要回退到的版本所对应的指针号.

          [3]>> commit id   版本所对应的commit id 号. 


[总结]>>>  git log 可以查看提交历史,以便确定要回退到哪个版本.

           git reflog  查看命令历史(主要是查看当前库里各版本的commit id号,以便确定回到未来的哪个版本)


[思考]>>>  如何用git管理多个文件(例如需要管理两部不同的小说A和B)的问题?

        <注意> 1. 一个版本库最好只管理一个文件(如小说A),因为如果同时管理多个文件会出现版本混乱的问题.
   
               2. 如果要管理多个文件,应该分别给每个文件都单独建立一个版本库(对应的库目录).

               3. 新建版本库的方法参见<二>.

五.管理修改

   1.git checkout -- file(注意 -- 前后有空格)命令,当你改乱了工作区(没有git add 添加到暂存区)的某个文件时,
   
     可以用这个命令直接丢弃刚刚做的修改. 

   2.如果在工作区改乱了某个文件的内容,并且还git add 添加到了暂存区,想要丢弃修改需要分两步:

          第一步:git reset HEAD file 回到1(也就是把提交到暂存区的修改,退回到工作区),
          
          然后再按照1执行 git chechout -- file 彻底丢弃修改.

   3.如果已经提交(即不仅是git add 添加到了暂存区,而且还git commit 提交到了版本库),
   
     不合适的修改到了版本库,想要撤销本次提交,则可按照 git reset --hard [版本id]进行版本回退.
     
     ------->前提是,本次修改没有提交到远程库.

   4.git rm 删除文件:一般情况下,在文件管理器中把文件删除(或者用rm命令删除)之后,工作区和版本库就不一致了(用git status可以查看哪些地方不一致).

     此时,如果确定要删除文件,再用 git rm file 命令删掉,并且git commit 提交到版本库.
     
     如果是删错了,则可以用git checkout -- file 命令撤销删除操作
     
     (实质上,git checkout 使用版本库里的版本替换工作区的版本)

六.远程仓库

    1.初识 GitHub :
        
        a.创建SSH Key(GitHub注册略过):首先在用户主目录下查看有无.ssh目录,如果有,        
        再看看目录下有无 id_rsa 和id_rsa.pub 这两个文件,如果已经有了,
        可直接跳到下一步;如果没有,则在终端输入命令: ssh-keygen -t rsa -C "youremail@example.com"
        然后一路回车,使用默认值即可(可以无需设置密码)

        b.登陆GitHub,add ssh key,并在key文本框里粘帖id_rsa_pub文件的内容,完成这些内容以后
        就可以开始远程仓库的学习了.

    2.添加远程仓库

        a.首先登陆GitHub,然后在右上角找到"Create a new repo"按钮,创建一个新的仓库:
          
        b.在本地仓库git_learn(一定要在本地仓库目录下,否则会报错)运行命令:
           git remote add origin https://github.com/lingdian87/git_learn.git(这个是GitHub下的地址名)
           这个命令的作用是:在GitHub上新建了一个名为origin(也可以叫别的名)的远程仓库
           接下来,就可以把本地仓库的所有内容推送到远程库上了

        c.git push -u origin master 这样就把本地库的内容推送到了远程上(实际上是把当前分支master推送到远程)
          [注意]--->由于远程库是空的,所以第一次推送master分支时,加上了-u参数,这样Git不但
                    把本地master分支内容推送到远程新的master分支,还会把本地的master分支
                    和远程的master分支关联起来,以后的推送或拉取时就可以简化命令.
        从现在起,只要本地做了提交(git commit),就可以通过 git push origin ma 把本地
        master分支的最新修改推送到GitHub.

      [小结]--->1.要关联一个远程库,用命令 git remote add origin 远程库名(一个地址)

                2.关联后,使用命令git push -u origin master 第一次推送,此后每次本地提交后
                  使用命令 git push origin master 就可以了.


